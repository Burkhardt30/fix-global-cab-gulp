@use "sass:math";

// Цвета ===========================================================================================

$dark-text-color: #625f6e;

$general-bg-color: #f8f8f8;
$inactived-color: #ea5455;
$accent-light-color: #44c4e12c;
$accent-color: #44c4e1;
$hover-color: #6d62e4;
$green-color: #60d174;

$white-color: #fff;
$gradient: linear-gradient(118deg, $accent-color, #32799eb3);

$shadow: 0 0 15px 0 #22292f1a;
$accent-shadow: 0 8px 25px -8px $accent-color;

// Значения ===========================================================================================

$container: 1470;

// Шрифты ===========================================================================================

%m-400 {
    font-family: Montserrat, sans-serif;
    font-weight: 400;
}

%m-500 {
    font-family: Montserrat, sans-serif;
    font-weight: 500;
}

%m-600 {
    font-family: Montserrat, sans-serif;
    font-weight: 600;
}

// Чекбоксы ===========================================================================================

%checkbox-hidden {
    width: 1px;
    height: 1px;
    overflow: hidden;
    clip: rect(0 0 0 0);
    position: absolute;
}

// Адаптивные свойства ===========================================================================================

$maxWidth: 1920;

@mixin adaptiveValue($property, $startSize, $endSize, $endWidth: 320, $type: 1) {
    $addSize: $startSize - $endSize;

    @if $type==1 {
        #{$property}: $startSize + px;

        @media (max-width: #{$container + px}) {
            #{$property}: calc(#{$endSize + px} + #{$addSize} * ((100vw - #{$endWidth + px}) / #{$container - $endWidth}));
        }

        @media (max-width: #{$endWidth + px}) {
            #{$property}: #{$endSize + px};
        }
    }

    @else if $type==2 {
        #{$property}: $startSize + px;

        @media (min-width: #{$container + px}) {
            #{$property}: calc(#{$endSize + px} + #{$addSize} * ((100vw - #{$endWidth + px}) / #{$maxWidth - $endWidth}));
        }
    }

    @else {
        #{$property}: calc(#{$endSize + px} + #{$addSize} * ((100vw - #{$endWidth + px}) / #{$maxWidth - $endWidth}));
    }
}

// @include adaptiveValue(width, 100, 10);

// width: 35px;
// @media (max-width: 1140px) {
//     width: (10px + (35 - 10) * ((100vw - 320px) / (1140 - 320)));
// }

// Пройтись по каждому элементу ===========================================================================================

@mixin oneByOne($num, $s) {
    @for $var from 1 to ($num + 1) {
        $delay: ($var - 1) * $s;

        &:nth-child(#{$var}) {
            transition-delay: #{$delay + s};
        }
    }
}

//Подключение шрифта
@mixin font($font_name, $file_name, $weight, $style) {
    @font-face {
        font-family: $font_name;
        font-display: swap;
        src: url("../fonts/#{$file_name}.woff2") format("woff2"),
        url("../fonts/#{$file_name}.woff") format("woff");
        font-weight: #{$weight};
        font-style: #{$style};
    }
}

//Percent
@function percent($px, $from) {
    $result: math.div($px, $from) * 100%;
    @return $result;
}

//REM
@function rem($px) {
    $result: math.div($px, 16)+rem;
    @return $result;
}

//EM
@function em($px, $current: 16) {
    $result: math.div($px, $current)+em;
    @return $result;
}

//Currency
@mixin currency($sym) {
    &::after {
        content: "#{$sym}";
    }
}

// Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
    display: grid;
    gap: $gap;
    grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

// Адаптивное свойство (clamp)
// @mixin adaptiveValue($property, $startSize, $minSize, $keepSize: 0, $widthFrom: $containerWidth, $widthTo: $minWidth) {
//     @if ($startSize==0) {
//         $startSize: 0.000001;
//     }

//     @if ($minSize==0) {
//         $minSize: 0.000001;
//     }

//     // Для calc();
//     $addSize: math.div($startSize - $minSize, 16);

//     @if ($widthFrom ==$containerWidth and $maxWidthContainer ==0) {
//         $widthFrom: $maxWidth;
//     }

//     // Брейк-поинты в EM
//     $widthFromMedia: em($widthFrom);
//     $widthToMedia: em($widthTo);

//     // Формула плавающего значения
//     // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
//     $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
//     $yIntersection: -$widthTo * $slope + $minSize;

//     @if ($yIntersection==0) {
//         $yIntersection: 0.000001;
//     }

//     $flyValue: #{rem($yIntersection)}" + "#{$slope * 100}vw;

//     // Получение значения свойства
//     $propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};

//     // Если отрицательные значения
//     @if ($minSize > $startSize) {
//         $propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
//     }

//     // Устанавливаем значения по умолчанию
//     @if $keepSize  !=1 and $keepSize  !=3 {
//         @media (min-width: $widthFromMedia) {
//             #{$property}: rem($startSize);
//         }
//     }

//     // Адаптируем размер в промежутке между указанными ширинами вьюпорта
//     @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {

//         // Если поддерживается clamp();
//         @supports (#{$property}: $propertyValue) {
//             #{$property}: $propertyValue;
//         }

//         // Если не поддерживается clamp();
//         @supports not (#{$property}: $propertyValue) {
//             #{$property}: calc(#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
//         }
//     }

//     @if $keepSize  !=1 and $keepSize  !=2 {
//         @media (max-width: $widthToMedia) {
//             #{$property}: rem($minSize);
//         }
//     }
// }